import time

def multiply(k):
    result_x = 0
    result_y = 0
    base_x = 55066263022277343669578718895168534326250603453777594175500187360389116729240
    base_y = 32670510020758816978083085130507043184471273380659243275938904335757337482424

    while k > 0:
        if k & 1:
            if result_x == 0 and result_y == 0:
                result_x = base_x
                result_y = base_y
            else:
                slope = (result_y - base_y) * pow(result_x - base_x, 115792089237316195423570985008687907853269984665640564039457584007908834671661, 115792089237316195423570985008687907853269984665640564039457584007908834671663) % 115792089237316195423570985008687907853269984665640564039457584007908834671663 # Fermat's Little Theorem
                new_x = (slope ** 2 - result_x - base_x) % 115792089237316195423570985008687907853269984665640564039457584007908834671663
                new_y = (slope * (result_x - new_x) - result_y) % 115792089237316195423570985008687907853269984665640564039457584007908834671663
                result_x, result_y = new_x, new_y

        slope = (3 * base_x ** 2) * pow(2 * base_y, 115792089237316195423570985008687907853269984665640564039457584007908834671661, 115792089237316195423570985008687907853269984665640564039457584007908834671663) % 115792089237316195423570985008687907853269984665640564039457584007908834671663

        base_y = (slope * (base_x - (slope ** 2 - 2 * base_x) % 115792089237316195423570985008687907853269984665640564039457584007908834671663) - base_y) % 115792089237316195423570985008687907853269984665640564039457584007908834671663
        base_x = (slope ** 2 - 2 * base_x) % 115792089237316195423570985008687907853269984665640564039457584007908834671663

        k >>= 1

    return result_x, result_y

private_key = 3572348754320758732478057
start_time = time.time()
public_x, public_y = multiply(private_key)
end_time = time.time()

print("Public Coords:")
print(f"X: {public_x}")
print(f"Y: {public_y}")

if (public_y % 2 == 0):
    add = "02" + hex(public_x)[2:].rjust(64, '0')
else:
    add = "03" + hex(public_x)[2:].rjust(64, '0')

print("Public Key:")
print(f"X: {add}")

print(f"Time taken: {end_time - start_time:.10f} seconds")